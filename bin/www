#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app'),
  logger = require('../lib/logger'),
  http = require('http'),
  config = require('../config/server');
/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = val => {
  let port = parseInt(val, 10)
  if (isNaN(port)) return val
  if (port >= 0) return port
  return false
}

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(config.port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
  if (error.syscall !== 'listen') throw error

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  let addr = server.address()
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  logger.info('Listening on ' + bind)
}


server.on('error', onError)
server.on('listening', onListening)

process.on('warning', logger.warn)
process.on('uncaughtException', logger.error)
